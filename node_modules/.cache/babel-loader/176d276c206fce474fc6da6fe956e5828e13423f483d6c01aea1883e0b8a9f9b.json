{"ast":null,"code":"var _jsxFileName = \"/Users/simeondong/Desktop/gitpages/simd22.github.io/src/components/Portfolio.jsx\";\nimport React from 'react';\n// import portfolio from '../portfolio.png'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Portfolio = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    name: \"portfolio\",\n    className: \"w-full h-screen pt-[60px] pb-[60px] bg-[#F3E5FA] flex flex-col items-center overflow-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-[20px] sm:pt-[50px] font-bold text-lg sm:text-3xl\",\n      children: \"Shorten Pls\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-[300px] sm:max-w-[700px] mx-auto text-left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"py-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"pt-[10px] font-bold text-lg sm:text-2xl\",\n          children: \"About\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-s sm:text-lg\",\n          children: \"In Shorten Pls, I used Express.js and MongoDB to create a functioning URL shortener utilizing a backend, user interface, and database. I used a MongoDB database to display the history of user entered links, shortened links, and amount of times a shortened link was clicked. Furthermore, through Mongoose, I defined a data schema that governed how the short and long links would be handled within the database.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"py-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-bold text-lg sm:text-2xl\",\n          children: \"Goal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-s sm:text-lg\",\n          children: \"The goal of this project was to gain a deeper understanding of how data is processed and transferred between a database and a server, with a specific emphasis on GET and POST requests. I also sought to implement these processes with popular tools like MongoDB and Express.js.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"py-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-bold text-lg sm:text-2xl\",\n          children: \"Reflection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-s sm:text-lg\",\n          children: \"Throughout this project, I dove deeper into server-side and database-side processing of requests. I successfully implemented an Express server that communicated with a MongoDB database. Overall, I gained a better understanding for utilizing a database within a project, which is an important step towards creating more complex projects. Furthermore, I refined my HTML, CSS, and JavaScript capabilities while learning how to use EJS to embed JavaScript code dynamically.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n_c = Portfolio;\nexport default Portfolio;\nvar _c;\n$RefreshReg$(_c, \"Portfolio\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Portfolio","name","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/simeondong/Desktop/gitpages/simd22.github.io/src/components/Portfolio.jsx"],"sourcesContent":["import React from 'react'\n// import portfolio from '../portfolio.png'\n\nconst Portfolio = () => {\n  return (\n    <div name=\"portfolio\" className='w-full h-screen pt-[60px] pb-[60px] bg-[#F3E5FA] flex flex-col items-center overflow-auto'>\n\n      {/* <div className='w-[350px] sm:w-1/2 mx-auto pt-[50px]'>\n        <img src={spotify} alt=\"\" className='rounded-lg'/>\n      </div> */}\n\n      <div className='pt-[20px] sm:pt-[50px] font-bold text-lg sm:text-3xl'>\n        Shorten Pls\n      </div>\n\n      <div className='max-w-[300px] sm:max-w-[700px] mx-auto text-left'>\n\n        <div className='py-4'>\n\n          <p className='pt-[10px] font-bold text-lg sm:text-2xl'>About</p>\n          <p className='text-s sm:text-lg'>\n            In Shorten Pls, I used Express.js and MongoDB to create a functioning URL shortener utilizing a backend, user interface, and database. \n            I used a MongoDB database to display the history of user entered links, shortened links, and amount of times a shortened link was clicked. \n            Furthermore, through Mongoose, I defined a data schema that governed how the short and long links would be handled within the database. \n          </p>\n        </div>\n        \n        <div className=\"py-4\">\n          <p className='font-bold text-lg sm:text-2xl'>Goal</p>\n          <p className='text-s sm:text-lg'>\n            The goal of this project was to gain a deeper understanding of how data is processed and transferred between a database and a server, with a specific emphasis on GET and POST requests.\n            I also sought to implement these processes with popular tools like MongoDB and Express.js.  \n          </p>\n        </div>\n        \n        <div className=\"py-4\">\n          <p className='font-bold text-lg sm:text-2xl'>Reflection</p>\n          <p className='text-s sm:text-lg'>\n            Throughout this project, I dove deeper into server-side and database-side processing of requests. \n            I successfully implemented an Express server that communicated with a MongoDB database. \n            Overall, I gained a better understanding for utilizing a database within a project, which is an important step towards creating more complex projects.\n            Furthermore, I refined my HTML, CSS, and JavaScript capabilities while learning how to use EJS to embed JavaScript code dynamically.\n          </p>\n        </div>\n    \n      </div>\n      \n      {/* <div>\n      <a\n        href=\"https://spotify-clone-922c2.web.app/\" // Replace with the URL of the external website\n        target=\"_blank\"              // Open the link in a new tab or window\n        rel=\"noopener noreferrer\"     // Recommended for security when using target=\"_blank\"\n      >\n        <button className='bg-pink-600 text-[#F3E5FA] group border-2 px-6 py-3 my-2 flex items-center rounded-full hover:bg-[#E4F8E6] hover:border-[#E4F8E6] hover:text-[#4CAF50]'>\n          See Final Product\n        </button>\n      </a>\n\n    </div> */}\n\n    </div>\n  )\n}\n\nexport default Portfolio"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,oBACED,OAAA;IAAKE,IAAI,EAAC,WAAW;IAACC,SAAS,EAAC,2FAA2F;IAAAC,QAAA,gBAMzHJ,OAAA;MAAKG,SAAS,EAAC,sDAAsD;MAAAC,QAAA,EAAC;IAEtE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAENR,OAAA;MAAKG,SAAS,EAAC,kDAAkD;MAAAC,QAAA,gBAE/DJ,OAAA;QAAKG,SAAS,EAAC,MAAM;QAAAC,QAAA,gBAEnBJ,OAAA;UAAGG,SAAS,EAAC,yCAAyC;UAAAC,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAChER,OAAA;UAAGG,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAAC;QAIjC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAENR,OAAA;QAAKG,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnBJ,OAAA;UAAGG,SAAS,EAAC,+BAA+B;UAAAC,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACrDR,OAAA;UAAGG,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAAC;QAGjC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAENR,OAAA;QAAKG,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnBJ,OAAA;UAAGG,SAAS,EAAC,+BAA+B;UAAAC,QAAA,EAAC;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC3DR,OAAA;UAAGG,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAAC;QAKjC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAeH,CAAC;AAEV,CAAC;AAAAC,EAAA,GA3DKR,SAAS;AA6Df,eAAeA,SAAS;AAAA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}